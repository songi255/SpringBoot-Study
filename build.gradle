/1~2년이 지나면서 책 내용이 많이 바뀐 듯 하다. 바뀐내용은 적지 않겠다./
/여튼, 아래처럼 적고나서, 오른쪽에 아이콘이 있는데 Gradle 변경내용로드(Ctrl + Shift + O) 해주면 자동으로 의존모듈을 다운받는다./
/다 다운 받으면 오른쪽 Gradle 탭에서 잘 다운되었는지 확인할 수 있다./

buildscript {
    ext { /ext는 build.gradle 내에서 사용하는 전역변수를 설정하겠다는 의미. 아래 코드는 springBootVersion 의존성을 따로 빼준 것임/
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies { /gradle의 boot용 plugin의 의존성 설정/
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/아래는 앞서 선언한 플러그인 의존성들을 적용할 것인지 결정/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
/io.spring.dependecy-management 플러그인은 SpringBoot 의존성들을 관리해주는 플러그인으로, 필수이다./
/걍 그외, 앞 4개의 플러그인들은 Java와 SpringBoot를 사용하기 위한 필수 플러그인들이니 항상 추가하면 된다./

/
plugins {
    id 'java'
}
/

group 'org.study'
version '1.0-SNAPSHOT'

repositories {
    /repositories는 각종 의존성(라이브러리)들을 어떤 원격저장소에서 받을 지 정한다./
    /기본적으로 mavenCentral을 많이 사용하나, 최근에는 라이브러리 업로드 난이도때문에 jcenter도 많이 사용한다./
    /mavenCantral는 본인이 만든 라이브러리를 업로드하기 위해서는 정말 많은 과정과 설정이 필요하다./
    /최근 나온 jcenter는 개선되어, 라이브러리 업로드가 간편하고, 심지어 여기 업로드하면 mavenCentral에도 업로드될 수 있도록 자동화할 수 있다./
    /그래서 개발자들이 점점 jcenter로 이동하고 있다. 여기서는 둘 다 사용하곘다./
    mavenCentral()
    jcenter()
}

dependencies {
    /개발에 필요한 의존성들을 선언하는 곳이다./
    /재밌는것은 IntelliJ가 Maven저장소의 데이터를 인덱싱해서 관리하기 때문에, 의존성 자동완성이 가능하다ㅋ/
    /다만, 특정버전을 명시하지 않도록 한다. 명시하지 않아야만 맨 위의 buildscript의 dependencies에서 설정한 버전을 따라가게 된다./
    /여튼 이렇게 버전관리를 한 곳에 집중시켜, 버전충돌도 해결되고 편하게 개발할 수 있다./
    /testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1' 기존 내용은 우선 주석처리함./
    /testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'/
    /compile('org.springframework.boot:spring-boot-starter-web') compile은 deprecated 되었다고 한다. 대신 implementation를 사용한다./
    /testCompile('org.springframework.boot:spring-boot-starter-test')도 마찬가지.. /
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    /테스트가 안됬던 이유.. settings - Build, Execution, Deployment - Gradle - Run tests using : IntelliJ 로,
     IntelliJ가 test를 실행하게끔 변경해주어야했다./

    /Lombok의 추가/
    /implementation('org.projectlombok:lombok');/
    /이후, lombok plugin까지 설치한다./
    /IDE 재시작하면 알려준다고는 하는데, 일단 수동설정하겠다.
    settings - Build, Execution, Deployment - Compiler - Annotaion Processor - Enable annotation processing 체크해주자.
    다만 이걸 체크하는건 프로젝트마다 해줘야 한다./
    /롬복도 gradle5 이상에서 바뀌었다고 한다. 이제는 아래와 같이 적어줘야 한다./
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    /JPA 의존성 추가/
    /springBoot용 Spring Data JPA 추상화 라이브러리. Boot 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해준다./
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    /인메모리 RDB. 별도의 설치 없이 프로젝트 의존성만으로 관리할 수 있다.
    메모리에서 실행되기 떄문에, App 재시작마다 초기화된다. -> 이를 이용하여 test용도로 많이 사용된다.
    여기서는 JPA의 테스트, 로컬 환경에서의 구동에 사용할 예정./
    implementation('com.h2database:h2')
}

test {
    /이거 작동안한다고 하네.. 먼가 변경점이 많은 듯 하다./
    useJUnitPlatform()
    /useTestNG()/
}