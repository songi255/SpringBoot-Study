우선 템플릿 엔진에 대해서 알아보자.
    - 지정된 템플릿양식 + 데이터로 HTML 를 출력하는 SW를 말함.
    - JSP, Freemarker(Server Template Engine) 혹은 React, Vue의 View 파일들(Client Template Engine)...
    - JSP는 명확하게는 Server Template Engine은 아니다만, Spring에서 쓰는 경우 View의 역할만 하도록 구성할 때도 있는데 이때는 템플릿 엔진으로써 사용될 수 있다.
    - 물론 React, Vue의 SSR을 할 수도 있다. 부트에서는 Nashorn, J2V8이 있다. 다만 많은 수고가 필요하다.

mustache란?
    - 수많은 언어를 지원하는 가장 심플한 템플릿엔진
        - Ruby, JS, python, PHP, Java, Perl, Go, ASP 등 대부분 지원
        - Java에서 사용될 때는 Server Template Engine으로, JS에서 사용될때는 Client Template Engine으로 모두 사용가능하다.
    - 원래 Java에는 JSP, Velocity, Freemarker, Thymeleaf 등 다양한 서버템플릿엔진이 존재한다. 다만 단점들은 아래와 같다.
        - JSP, Velocity : SpringBoot에서 권장하지 않는다.
        - Freemarker : 템플릿엔진으로써는 너무 과하게 많은 기능을 지원한다.
        - Thymeleaf : Spring 진영에서 적극적으로 밀고있지만 문법이 어렵다. Tag에 속성으로 템플릿기능을 사용한다. Vue를 사용해봤다면 괜찮을 것.
    - 그럼 mustache의 장점은 무엇일까?
        - 문법이 심플하다
        - 로직코드를 사용할 수 없다. -> View 영역이 명확하게 분리된다.
        - Mustache.js, Mustache.java 2가지 다 있어서, 하나의 문법으로 Client/Server Template를 모두 사용할 수 있다.
        - IntelliJ Community 버전에서도 플러그인 지원해서 무료다.
            - JSP, Thymeleaf 등은 ultimate 버전에서만 공식지원한다.
    - 필자 개인적 의견으로는 템플릿엔진은 화면역할에만 충실해야 한다고 생각한다고 한다.
    - Plugin의 장점
        - 문법체크
        - HTML 문법지원
        - 자동완성
        - 일단 설치하자. -> 재시작 필수!
    - build.gradle에 의존성 추가 ㄱㄱ

mustache의 기본 파일위치는 src/main/resources/templates 이다.
    - 이 위치에 mustache 파일을 두면 SpringBoot에서 자동로딩한다.


