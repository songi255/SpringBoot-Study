기존에는 MyBatis같은 SQL Mapper를 이용해서 개발을 했었다. 그러다보니 실제로 개발하는 시간보다 SQL 짜는 시간이 더 많았다
한가지 더 문제가 있는데, 패러다임이 불일치한다는 것이다.
    - RDB는 어떻게 데이터를 저장할지에 초점이 맞춰진 기술이다.
    - 객체지향 프로그래밍은 기능과 속성을 한곳에서 관리하는 기능이다.
    - RDB로 객체지향을 표현할 수 있을까? 쉽지 않다. 애초에 사상부터 다른 시작점에서 출발했으니까.

문제의 해결책으로 자바 표준 ORM(Object Relation Mapping) 기술이 제시되었다.
    - MyBatis는 ORM이 아니라 SQL Mapper이다. ORM은 객체를 매핑하고, SQL Mapper는 쿼리를 매핑한다.
    - JPA는 RDB와 객체지향 중간에서 패러다임 일치를 시켜주기 위해 등장했다.
    - SQL을 대신 생성해서 실행한다.

Spring Data JPA
    - JPA는 인터페이스로서 자바 표준명세서이다.
    - JPA를 사용하기 위해서는 구현체가 필요하다 (Hibernate, Eclipse Link 등..)
        - 하지만 Spring에서 JPA를 쓸 때는 이 구현체들을 직접 다루지는 않는다.
        - 구현체들을 좀 더 쉽게 다루기 위해 추상화시킨 Spring Data JPA라는 모듈을 이용해서 JPA를 다룬다.
            - 관계는 다음과 같다. JPA <- Hibernate <- Spring Data JPA
            - Hibernate와 Spring Data JPA 사용에는 큰 차이가 없으나, Spring에서는 이를 개발했고 권장한다. 이렇게 한단계 더 감싼 것이 등장한 이유가 있다.
                - 1. 구현체 교체의 용이성
                    - Hibernate 외에 다른 구현체로 쉽게 교체하기 위함.
                    - 언젠가 Hibernate의 수명이 다해서 새로운 JPA 구현체가 대세가 되면, Spring Data JPA가 내부에서 구현체 매핑을 지원하기 때문에 쉽게 교체할 수 있다.
                    - 실제로, Java의 Redis 클라이언트가 Jedis에서 Lettuce로 넘어갈 때 Spring Data Redis를 쓰신 분들은 아주 쉽게 교체를 했다.
                - 2. 저장소 교체의 용이성
                    - RDB를 쉽게 교체할 수 있다.
                    - 트래픽이 점점 많아져 RDB로는 도저히 감당이 안 될 때가 올 수 있는데, 이때 Spring Data JPA에서 Spring Data MongoDB로 의존성만 교체하면 된다.
                    - 이는 Spring Data~~ 하위 프로젝트들은 기본적인 CRUD 인터페이스가 같기 떄문이다.
                        - 즉, Spring Data JPA, Spring Data Redis, Spring Data MongoDB 등등은 save(), findAll(), findOne()등을 인터페이스로 가진다.
                        - 그래서 저장소가 교체되어도 기본적인 기능은 변할 것이 없다.

실무에서 JPA
    - 실무적용이 어려운 가장 큰 이유는 높은 러닝커브이다.
        - JPA를 잘 쓰려면 객체지향 프로그래밍과 RDB를 둘 다 이해해야 한다.
    - 하지만 그만큼 JPA로 얻는 보상은 크다.
        - 우선 CRUD 쿼리를 직접 작성할 필요가 없다.
        - 부모-자식 관계표현, 1:N 관계표현, 상태와 행위를 한 곳에서 관리하는 등 객체지향 프로그래밍을 쉽게 할 수 있다.
    - 속도이슈는 임상적으로 문제가 없었다고 한다.
        - JPA에서 이미 여러 성능이슈 해결책들을 준비해놨기 때문에, 이를 잘 활용하면 네이티브 쿼리만큼의 퍼포먼스를 낼 수 있다.

JPA에 대해서 좀 더 자세하게 공부하고 싶다면 김영한님의 "자바 ORM 표준 JPA 프로그래밍"을 참고해보자!
