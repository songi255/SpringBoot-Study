DB를 직접 구성하면 모니터링, 알람, 백업, HA 구성 등 모두 직접해야만 한다
- 처음 구축할 때 며칠이 걸릴 수 있는 일이다..
AWS는 앞서 말한 작업들을 모두 지원하는 관리형 서비스 RDS(Relational DB Service)를 제공한다.
- AWS 에서 지원하는 클라우드 기반 RDB이다.
- HW 프로비저닝, DB 설정, 패치 및 백업 같은 잦은 운영작업을 자동화하여 개발을 지원한다.
- 추가로 조정가능한 용량을 지원해서 예상치 못한 양의 데이터가 쌓여도 비용만 추가로 내면 정상서비스가 가능한 장점도 있다.

RDS 인스턴스 생성
- RDS 검색해서 DB 생성
- 표준생성
	- MySQL보다 MariaDB가 더 좋고, 활발하고, Amazon을 비롯한 많은 회사들이 주목하고있다고 한다. 이제는 바꿔야 할 때가 온 것 같다.
	- MariaDB의 추천 이유에 뭐가 있을까?
		- Amazon Aurora 교체 용이성
			- AWS에서 MySQL과 PostgreSQL을 클라우드 기반에 맞게 재구성한 DB
			- 클라우드 서비스에 가장 적합한 DB이다.
			- 공식자료에 의하면 MySQL 대비 5배, RDS PostgreSQL 대비 3배 성능이라고 한다.
			- 그리고 AWS에서 직접 엔지니어링하고 있으니 계속 발전한다.
			- 그러나 시작단계에서 Aurora를 선택하기는 힘들다
				- 프리티어 대상이 아니다. 월 최저비용이 10만원 이상이라 꽤 부담스럽다.
				- 차후 서비스 규모가 일정이상 커진 후에 이전을 고려해보자.
- 템플릿 : 프리티어
- 인스턴스 식별자, 사용자이름, 암호 설정
- 스토리지 : 20으로 설정 + 자동조정 비활성화
	- 아마 t2.micro 설정이랑 연관이 있는 듯 하다.
- 연결
	- 퍼블릭엑세스 : 예
		- 이후 보안그룹에서 지정된 IP만 접근가능하도록 막을 예정이다.
- 추가구성 - DB옵션의 초기 DB이름 정도만 설정해주자. 걍 springboot_study로 하면 된다.

RDS 처음 생성 시 몇가지 필수 설정이 필요하다.
- 타임존
- Character Set
- Max Connection
파라미터 그룹 -> 생성
- 방금 생성한 MariaDB와 버전을 맞춘다.(10.2.21 이면 10.2로..)
- 그룹이름 설정, 생성.
파라미터 편집
- time_zone : Asia/Seoul
- character_set 6개는 전부 utf8mb4 (client, connection, database, filesystem, results, server)
- collation 2개는 utf8mb4_general_ci (connection, server)
	- utf8 과 utf8mb4 차이는 이모지 저장가능여부이다. (보편적으로 utf8mb4를 이용한다.)
- max_conntections 150
	- RDS의 max connection은 인스턴스 사양에 따라 자동할당된다.
	- 현재 프리티어 사양으로는 60개정도만 가능해서 좀 더 넉넉하게 150개로 지정한다.
	- 이후에 RDS 사양을 높이게 되면 기본값 LEAST({DBInstanceClassMemory/25165760},12000) 으로 다시 돌려놓으면 된다.
이제 이 파라미터 그룹과 아까 생성한 DB랑 연결하겠다.
- 데이터베이스 -> 수정 -> DB 파라메터 그룹 변경
- 즉시적용 선택
	- 예약된 다음 유지시간 -> 새벽시간대에 진행하게 되는데, 이것은 수정동안 DB작동이 멈출 수 있어서 예약걸어두라는 뜻이고, 지금은 필요없다.
- 간혹 파라미터그룹 제대로 반영되지 않는 경우가 있으므로, 정상적용을 위해 재부팅한다.

재부팅까지 됬다면 로컬 PC에서 접속해보자.
- RDS 보안그룹에 본인 IP를 추가한다.
	