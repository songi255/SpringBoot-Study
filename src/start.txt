0. Why IntelliJ?
    - 훨씬 강력한 자동완성
    - 훨씬 다양한 리팩토링, 디버깅 기능
    - 이클립스 git에 비해 훨씬 높은 자유도
    - 프로젝트 시작 시 인덱싱 수행 -> 자원들에 대한 빠른 검색속도
    - HTML, CSS, JS, XML에 대한 강력한 기능 지원
    - Java, SpringBoot 버전업에 맞춘 빠른 업데이트
1. IntelliJ 에 앞서, Jetbrain 제품들을 통합관리할 수 있는 Toolbox 부터 설치하자.
    - Toolbox의 다양한 기능을 확인할 수 있다. IntelliJ의 setting에 들어가보자
        - Maximum heap Size가 750MB로 되어있는데 개발 PC가 4GB이하일때를 가정하고 설정된 값이다. 일반적으로 8G는 1024~2048, 16G면 2048~4096으로 사용한다.
2. 프로젝트 생성
    - Java - Gradle 설정
    - ArtifactId는 프로젝트의 이름이 됨
    - group 설정
3. Gradle -> SpringBoot project 변경
    - build.gradle 열어서 수정부터 시작하면 된다. 내용은 build.gradle에 적어놓았다.
4. Git 연동
    - 나중에 CLI가 더 익숙해지면 걍 그렇게 써도 된다.
    - Ctrl + Shift + A로 Action 검색하든지, 직접 찾든지.. 여튼 share project on github
    - gradle/wrapper, build.gradle, gradlew, gradlew.bat은 포함. .gradle, .idea는 미포함해서 커밋하자. (근데 깃헙에는 gradle/wrapper가 생성되네.)
    - github에서 잘 올라갔는지 확인해보자
    - .gitignore을 작성하자.
        - IntelliJ에서 기본 지원이 없어서 플러그인 깐다고 하는데, 지금 시점에서는 지원하는 듯 하다.
        - plugin을 깔고싶다면 .ignore을 검색하자. (플러그인은 설치후에 꼭 IDE를 재시작하자.)
        - project 선택 후 생성 -> .ignorefile - gitignorefile
        - 파일의 내용은 .gradle이랑 .idea를 한 줄씩 써주자. 탐색기에서 색이 바래는것을 보니 플러그인 없이도 제대로 적용이 되는게 맞다.
        - 커밋해보자. (Ctrl + K)
        - 푸시도 해보자. (Ctrl + Shift + K)
